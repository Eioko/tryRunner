<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="code_sys.LayerMap.LayerChatterMapper">

    <!-- 基础字段映射 -->
    <resultMap id="BaseResultMap" type="code_sys.Po.Entity.Chatter">
        <id column="id" property="id"/>
        <result column="sender_id" property="senderId"/>
        <result column="receiver_id" property="receiverId"/>
        <result column="content" property="content"/>
        <result column="is_read" property="isRead"/>
        <result column="create_time" property="createTime"/>
    </resultMap>

    <resultMap id="ChatterVOResultMap" type="code_sys.Po.Vo.ChatterVO" extends="BaseResultMap">
        <!-- 发送方联表字段 -->
        <result column="sender_name" property="senderName"/>
        <result column="sender_account" property="senderAccount"/>
        <result column="sender_avatar" property="senderAvatar"/>

        <!-- 接收方联表字段 -->
        <result column="receiver_name" property="receiverName"/>
        <result column="receiver_account" property="receiverAccount"/>
        <result column="receiver_avatar" property="receiverAvatar"/>
    </resultMap>

    <!-- 插入聊天记录 -->
    <insert id="save" parameterType="code_sys.Po.Entity.Chatter">
        INSERT INTO chatter
            (sender_id, receiver_id, content, is_read, create_time)
        VALUES
            (#{senderId}, #{receiverId}, #{content}, #{isRead}, #{createTime})
    </insert>

    <!-- 查询聊天记录 -->
    <select id="query" resultMap="ChatterVOResultMap" parameterType="code_sys.Po.Dto.query.sons.ChatterQueryDto">
        SELECT
        c.*,
        sender.user_name AS sender_name,
        sender.user_account AS sender_account,
        sender.user_avatar AS sender_avatar,
        receiver.user_name AS receiver_name,
        receiver.user_account AS receiver_account,
        receiver.user_avatar AS receiver_avatar
        FROM chatter c
        LEFT JOIN user sender ON c.sender_id = sender.id
        LEFT JOIN user receiver ON c.receiver_id = receiver.id
        <where>
            <!-- 发送方过滤 -->
            <if test="senderId != null">
                AND sender.id = #{senderId}
            </if>
            <!-- 接收方过滤 -->
            <if test="receiverId != null">
                AND receiver.id = #{receiverId}
            </if>
        </where>
        ORDER BY c.create_time DESC
    </select>

    <!-- 查询聊天表项 -->
    <select id="queryTable" resultMap="ChatterVOResultMap" parameterType="code_sys.Po.Dto.query.sons.ChatterQueryDto">
        SELECT
        c.*,
        sender.user_name AS sender_name,
        sender.user_account AS sender_account,
        sender.user_avatar AS sender_avatar,
        receiver.user_name AS receiver_name,
        receiver.user_account AS receiver_account,
        receiver.user_avatar AS receiver_avatar
        FROM chatter c
        INNER JOIN user sender ON c.sender_id = sender.id
        INNER JOIN user receiver ON c.receiver_id = receiver.id
        INNER JOIN (
            SELECT
            GREATEST(sender_id, receiver_id) AS user1,
            LEAST(sender_id, receiver_id) AS user2,
            MAX(create_time) AS last_time
            FROM chatter
            WHERE (#{senderId} = sender_id OR #{senderId} = receiver_id)
            <if test="content != null and content != ''">
                AND content LIKE CONCAT('%', #{content}, '%')
            </if>
            <if test="startTime != null and endTime != null">
                AND c.create_time BETWEEN #{startTime} AND #{endTime}
            </if>
            GROUP BY user1, user2
        ) last_conversation
        ON (c.sender_id = user1 AND c.receiver_id = user2
        OR c.sender_id = user2 AND c.receiver_id = user1)
        AND c.create_time = last_conversation.last_time
        WHERE (#{senderId} = c.sender_id OR #{senderId} = c.receiver_id)
        ORDER BY c.create_time DESC
    </select>
</mapper>
